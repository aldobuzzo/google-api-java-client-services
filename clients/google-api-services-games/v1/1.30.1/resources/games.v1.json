{
  "icons": {
    "x32": "http://www.google.com/images/icons/product/search-32.gif",
    "x16": "http://www.google.com/images/icons/product/search-16.gif"
  },
  "mtlsRootUrl": "https://www.mtls.googleapis.com/",
  "documentationLink": "https://developers.google.com/games/",
  "baseUrl": "https://www.googleapis.com/",
  "parameters": {
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "type": "string",
      "location": "query"
    },
    "uploadType": {
      "location": "query",
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "type": "string"
    },
    "alt": {
      "type": "string",
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "default": "json",
      "description": "Data format for response.",
      "location": "query"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "type": "string",
      "location": "query"
    },
    "callback": {
      "location": "query",
      "type": "string",
      "description": "JSONP"
    },
    "access_token": {
      "type": "string",
      "description": "OAuth access token.",
      "location": "query"
    },
    "fields": {
      "type": "string",
      "location": "query",
      "description": "Selector specifying which fields to include in a partial response."
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "quotaUser": {
      "location": "query",
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "type": "string"
    },
    "prettyPrint": {
      "type": "boolean",
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query"
    },
    "$.xgafv": {
      "location": "query",
      "type": "string",
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "enum": [
        "1",
        "2"
      ],
      "description": "V1 error format."
    }
  },
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/drive.appdata": {
          "description": "View and manage its own configuration data in your Google Drive"
        },
        "https://www.googleapis.com/auth/games": {
          "description": "Create, edit, and delete your Google Play Games activity"
        }
      }
    }
  },
  "name": "games",
  "description": "The Google Play games service allows developers to enhance games with social leaderboards,\n    achievements, game state, sign-in with Google, and more.",
  "kind": "discovery#restDescription",
  "canonicalName": "Games",
  "discoveryVersion": "v1",
  "revision": "20200625",
  "title": "Google Play Game Services",
  "resources": {
    "metagame": {
      "methods": {
        "listCategoriesByPlayer": {
          "path": "games/v1/players/{playerId}/categories/{collection}",
          "flatPath": "games/v1/players/{playerId}/categories/{collection}",
          "id": "games.metagame.listCategoriesByPlayer",
          "description": "List play data aggregated per category for the player corresponding to\n`playerId`.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "CategoryListResponse"
          },
          "parameters": {
            "collection": {
              "location": "path",
              "type": "string",
              "description": "The collection of categories for which data will be returned.",
              "enum": [
                "COLLECTION_UNSPECIFIED",
                "ALL"
              ],
              "required": true
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "location": "query",
              "description": "The maximum number of category resources to return in the response, used\nfor paging. For any response, the actual number of category resources\nreturned may be less than the specified `maxResults`.",
              "format": "int32"
            },
            "language": {
              "location": "query",
              "type": "string",
              "description": "The preferred language to use for strings returned by this method."
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "httpMethod": "GET",
          "parameterOrder": [
            "playerId",
            "collection"
          ]
        },
        "getMetagameConfig": {
          "response": {
            "$ref": "MetagameConfig"
          },
          "path": "games/v1/metagameConfig",
          "description": "Return the metagame configuration data for the calling application.",
          "parameters": {},
          "parameterOrder": [],
          "flatPath": "games/v1/metagameConfig",
          "id": "games.metagame.getMetagameConfig",
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        }
      }
    },
    "leaderboards": {
      "methods": {
        "list": {
          "parameters": {
            "maxResults": {
              "location": "query",
              "format": "int32",
              "type": "integer",
              "description": "The maximum number of leaderboards to return in the response.  For any\nresponse, the actual number of leaderboards returned may be less than the\nspecified `maxResults`."
            },
            "pageToken": {
              "type": "string",
              "location": "query",
              "description": "The token returned by the previous request."
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "description": "Lists all the leaderboard metadata for your application.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "LeaderboardListResponse"
          },
          "path": "games/v1/leaderboards",
          "id": "games.leaderboards.list",
          "httpMethod": "GET",
          "flatPath": "games/v1/leaderboards",
          "parameterOrder": []
        },
        "get": {
          "response": {
            "$ref": "Leaderboard"
          },
          "id": "games.leaderboards.get",
          "httpMethod": "GET",
          "description": "Retrieves the metadata of the leaderboard with the given ID.",
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "leaderboardId": {
              "description": "The ID of the leaderboard.",
              "type": "string",
              "location": "path",
              "required": true
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/leaderboards/{leaderboardId}",
          "parameterOrder": [
            "leaderboardId"
          ],
          "path": "games/v1/leaderboards/{leaderboardId}"
        }
      }
    },
    "achievementDefinitions": {
      "methods": {
        "list": {
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of achievement resources to return in the response, used\nfor paging. For any response, the actual number of achievement resources\nreturned may be less than the specified `maxResults`.",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            }
          },
          "parameterOrder": [],
          "httpMethod": "GET",
          "path": "games/v1/achievements",
          "response": {
            "$ref": "AchievementDefinitionsListResponse"
          },
          "id": "games.achievementDefinitions.list",
          "flatPath": "games/v1/achievements",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Lists all the achievement definitions for your application."
        }
      }
    },
    "scores": {
      "methods": {
        "get": {
          "response": {
            "$ref": "PlayerLeaderboardScoreListResponse"
          },
          "flatPath": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "path": "games/v1/players/{playerId}/leaderboards/{leaderboardId}/scores/{timeSpan}",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.scores.get",
          "description": "Get high scores, and optionally ranks, in leaderboards for the currently\nauthenticated player.  For a specific time span, `leaderboardId`\ncan be set to `ALL` to retrieve data for all leaderboards in a\ngiven time span.  `NOTE: You cannot ask for 'ALL' leaderboards and\n'ALL' timeSpans in the same request; only one parameter may be set to\n'ALL'.",
          "httpMethod": "GET",
          "parameterOrder": [
            "playerId",
            "leaderboardId",
            "timeSpan"
          ],
          "parameters": {
            "includeRankType": {
              "type": "string",
              "location": "query",
              "enum": [
                "INCLUDE_RANK_TYPE_UNSPECIFIED",
                "ALL",
                "PUBLIC",
                "SOCIAL"
              ],
              "description": "The types of ranks to return. If the parameter is omitted, no ranks will be\nreturned."
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "location": "query",
              "format": "int32"
            },
            "leaderboardId": {
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The ID of the leaderboard.  Can be set to 'ALL' to retrieve data for all\nleaderboards for this application."
            },
            "timeSpan": {
              "location": "path",
              "type": "string",
              "required": true,
              "description": "The time span for the scores and ranks you're requesting.",
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ]
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "playerId": {
              "location": "path",
              "required": true,
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID.",
              "type": "string"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          }
        },
        "submit": {
          "httpMethod": "POST",
          "description": "Submits a score to the specified leaderboard.",
          "parameterOrder": [
            "leaderboardId",
            "score"
          ],
          "path": "games/v1/leaderboards/{leaderboardId}/scores",
          "parameters": {
            "scoreTag": {
              "type": "string",
              "pattern": "[a-zA-Z0-9-._~]{0,64}",
              "description": "Additional information about the score you're submitting.  Values must\ncontain no more than 64 URI-safe characters as defined by section 2.3 of\nRFC 3986.",
              "location": "query"
            },
            "score": {
              "type": "string",
              "format": "int64",
              "required": true,
              "description": "The score you're submitting. The submitted score is ignored if it is worse\nthan a previously submitted score, where worse depends on the leaderboard\nsort order. The meaning of the score value depends on the leaderboard\nformat type. For fixed-point, the score represents the raw value.  For\ntime, the score represents elapsed time in milliseconds.  For currency, the\nscore represents a value in micro units.",
              "location": "query"
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "leaderboardId": {
              "location": "path",
              "required": true,
              "type": "string",
              "description": "The ID of the leaderboard."
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.scores.submit",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores",
          "response": {
            "$ref": "PlayerScoreResponse"
          }
        },
        "list": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "collection": {
              "description": "The collection of scores you're requesting.",
              "location": "path",
              "required": true,
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "type": "string"
            },
            "pageToken": {
              "type": "string",
              "description": "The token returned by the previous request.",
              "location": "query"
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "format": "int32",
              "type": "integer"
            },
            "leaderboardId": {
              "required": true,
              "description": "The ID of the leaderboard.",
              "location": "path",
              "type": "string"
            },
            "timeSpan": {
              "required": true,
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "location": "query",
              "description": "The time span for the scores and ranks you're requesting.",
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "id": "games.scores.list",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "httpMethod": "GET",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "path": "games/v1/leaderboards/{leaderboardId}/scores/{collection}",
          "response": {
            "$ref": "LeaderboardScores"
          },
          "description": "Lists the scores in a leaderboard, starting from the top."
        },
        "submitMultiple": {
          "request": {
            "$ref": "PlayerScoreSubmissionList"
          },
          "parameterOrder": [],
          "response": {
            "$ref": "PlayerScoreListResponse"
          },
          "description": "Submits multiple scores to leaderboards.",
          "path": "games/v1/leaderboards/scores",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/leaderboards/scores",
          "httpMethod": "POST",
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "id": "games.scores.submitMultiple"
        },
        "listWindow": {
          "id": "games.scores.listWindow",
          "path": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "flatPath": "games/v1/leaderboards/{leaderboardId}/window/{collection}",
          "parameterOrder": [
            "leaderboardId",
            "collection",
            "timeSpan"
          ],
          "parameters": {
            "resultsAbove": {
              "description": "The preferred number of scores to return above the player's score. More\nscores may be returned if the player is at the bottom of the leaderboard;\nfewer may be returned if the player is at the top. Must be less than or\nequal to maxResults.",
              "location": "query",
              "format": "int32",
              "type": "integer"
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "maxResults": {
              "location": "query",
              "description": "The maximum number of leaderboard scores to return in the response.  For\nany response, the actual number of leaderboard scores returned may be less\nthan the specified `maxResults`.",
              "format": "int32",
              "type": "integer"
            },
            "returnTopIfAbsent": {
              "description": "True if the top scores should be returned when the player is not in the\nleaderboard. Defaults to true.",
              "type": "boolean",
              "location": "query"
            },
            "timeSpan": {
              "enum": [
                "SCORE_TIME_SPAN_UNSPECIFIED",
                "ALL_TIME",
                "WEEKLY",
                "DAILY"
              ],
              "required": true,
              "location": "query",
              "description": "The time span for the scores and ranks you're requesting.",
              "type": "string"
            },
            "collection": {
              "enum": [
                "SCORE_COLLECTION_UNSPECIFIED",
                "PUBLIC",
                "SOCIAL",
                "FRIENDS"
              ],
              "required": true,
              "type": "string",
              "location": "path",
              "description": "The collection of scores you're requesting."
            },
            "leaderboardId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "The ID of the leaderboard."
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "LeaderboardScores"
          },
          "description": "Lists the scores in a leaderboard around (and including) a player's score."
        }
      }
    },
    "revisions": {
      "methods": {
        "check": {
          "httpMethod": "GET",
          "description": "Checks whether the games client is out of date.",
          "parameters": {
            "clientRevision": {
              "required": true,
              "type": "string",
              "location": "query",
              "description": "The revision of the client SDK used by your application. Format:\n`[PLATFORM_TYPE]:[VERSION_NUMBER]`. Possible values of `PLATFORM_TYPE` are:\n* `ANDROID` - Client is running the Android SDK.\n* `IOS` - Client is running the iOS SDK.\n* `WEB_APP` - Client is running as a Web App."
            }
          },
          "response": {
            "$ref": "RevisionCheckResponse"
          },
          "flatPath": "games/v1/revisions/check",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.revisions.check",
          "parameterOrder": [
            "clientRevision"
          ],
          "path": "games/v1/revisions/check"
        }
      }
    },
    "events": {
      "methods": {
        "listDefinitions": {
          "id": "games.events.listDefinitions",
          "description": "Returns a list of the event definitions in this application.",
          "path": "games/v1/eventDefinitions",
          "parameterOrder": [],
          "parameters": {
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "maxResults": {
              "description": "The maximum number of event definitions to return in the response, used for\npaging.  For any response, the actual number of event definitions to return\nmay be less than the specified `maxResults`.",
              "format": "int32",
              "location": "query",
              "type": "integer"
            }
          },
          "response": {
            "$ref": "EventDefinitionListResponse"
          },
          "httpMethod": "GET",
          "flatPath": "games/v1/eventDefinitions",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "listByPlayer": {
          "flatPath": "games/v1/events",
          "parameters": {
            "maxResults": {
              "location": "query",
              "type": "integer",
              "format": "int32",
              "description": "The maximum number of events to return in the response, used for paging.\nFor any response, the actual number of events to return may be less than\nthe specified maxResults."
            },
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query",
              "type": "string"
            }
          },
          "description": "Returns a list showing the current progress on events in this application\nfor the currently authenticated user.",
          "parameterOrder": [],
          "id": "games.events.listByPlayer",
          "response": {
            "$ref": "PlayerEventListResponse"
          },
          "path": "games/v1/events",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET"
        },
        "record": {
          "parameterOrder": [],
          "parameters": {
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/events",
          "response": {
            "$ref": "EventUpdateResponse"
          },
          "flatPath": "games/v1/events",
          "request": {
            "$ref": "EventRecordRequest"
          },
          "description": "Records a batch of changes to the number of times events have occurred for\nthe currently authenticated user of this application.",
          "httpMethod": "POST",
          "id": "games.events.record"
        }
      }
    },
    "players": {
      "methods": {
        "list": {
          "description": "Get the collection of players for the currently authenticated user.",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/players/me/players/{collection}",
          "flatPath": "games/v1/players/me/players/{collection}",
          "parameterOrder": [
            "collection"
          ],
          "id": "games.players.list",
          "httpMethod": "GET",
          "parameters": {
            "maxResults": {
              "description": "The maximum number of player resources to return in the response, used for\npaging. For any response, the actual number of player resources returned\nmay be less than the specified `maxResults`.",
              "type": "integer",
              "format": "int32",
              "location": "query"
            },
            "pageToken": {
              "location": "query",
              "description": "The token returned by the previous request.",
              "type": "string"
            },
            "collection": {
              "required": true,
              "enum": [
                "CONNECTED",
                "VISIBLE",
                "FRIENDS_ALL"
              ],
              "description": "Collection of players being retrieved",
              "location": "path",
              "type": "string"
            },
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            }
          },
          "response": {
            "$ref": "PlayerListResponse"
          }
        },
        "get": {
          "httpMethod": "GET",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "path": "games/v1/players/{playerId}",
          "description": "Retrieves the Player resource with the given ID.  To retrieve the player\nfor the currently authenticated user, set `playerId` to `me`.",
          "response": {
            "$ref": "Player"
          },
          "id": "games.players.get",
          "flatPath": "games/v1/players/{playerId}",
          "parameters": {
            "playerId": {
              "location": "path",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID.",
              "required": true,
              "type": "string"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            }
          },
          "parameterOrder": [
            "playerId"
          ]
        }
      }
    },
    "applications": {
      "methods": {
        "verify": {
          "description": "Verifies the auth token provided with this request is for the application\nwith the specified ID, and returns the ID of the player it was granted for.",
          "httpMethod": "GET",
          "response": {
            "$ref": "ApplicationVerifyResponse"
          },
          "flatPath": "games/v1/applications/{applicationId}/verify",
          "path": "games/v1/applications/{applicationId}/verify",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {
            "applicationId": {
              "type": "string",
              "location": "path",
              "required": true,
              "description": "The application ID from the Google Play developer console."
            }
          },
          "parameterOrder": [
            "applicationId"
          ],
          "id": "games.applications.verify"
        },
        "get": {
          "description": "Retrieves the metadata of the application with the given ID. If the\nrequested application is not available for the specified\n`platformType`, the returned response will not include any\ninstance data.",
          "flatPath": "games/v1/applications/{applicationId}",
          "path": "games/v1/applications/{applicationId}",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "id": "games.applications.get",
          "httpMethod": "GET",
          "parameters": {
            "language": {
              "type": "string",
              "description": "The preferred language to use for strings returned by this method.",
              "location": "query"
            },
            "applicationId": {
              "required": true,
              "type": "string",
              "description": "The application ID from the Google Play developer console.",
              "location": "path"
            },
            "platformType": {
              "location": "query",
              "enum": [
                "PLATFORM_TYPE_UNSPECIFIED",
                "ANDROID",
                "IOS",
                "WEB_APP"
              ],
              "type": "string",
              "description": "Restrict application details returned to the specific platform."
            }
          },
          "parameterOrder": [
            "applicationId"
          ],
          "response": {
            "$ref": "Application"
          }
        },
        "played": {
          "parameters": {},
          "flatPath": "games/v1/applications/played",
          "id": "games.applications.played",
          "path": "games/v1/applications/played",
          "parameterOrder": [],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "description": "Indicate that the currently authenticated user is playing your\napplication.",
          "httpMethod": "POST"
        }
      }
    },
    "snapshots": {
      "methods": {
        "get": {
          "id": "games.snapshots.get",
          "description": "Retrieves the metadata for a given snapshot ID.",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "Snapshot"
          },
          "httpMethod": "GET",
          "path": "games/v1/snapshots/{snapshotId}",
          "flatPath": "games/v1/snapshots/{snapshotId}",
          "parameterOrder": [
            "snapshotId"
          ],
          "parameters": {
            "language": {
              "type": "string",
              "location": "query",
              "description": "The preferred language to use for strings returned by this method."
            },
            "snapshotId": {
              "type": "string",
              "description": "The ID of the snapshot.",
              "location": "path",
              "required": true
            }
          }
        },
        "list": {
          "id": "games.snapshots.list",
          "description": "Retrieves a list of snapshots created by your application for the player\ncorresponding to the player ID.",
          "scopes": [
            "https://www.googleapis.com/auth/drive.appdata",
            "https://www.googleapis.com/auth/games"
          ],
          "httpMethod": "GET",
          "response": {
            "$ref": "SnapshotListResponse"
          },
          "parameterOrder": [
            "playerId"
          ],
          "parameters": {
            "pageToken": {
              "location": "query",
              "type": "string",
              "description": "The token returned by the previous request."
            },
            "playerId": {
              "description": "A player ID. A value of `me` may be used in place of the authenticated\nplayer's ID.",
              "type": "string",
              "required": true,
              "location": "path"
            },
            "language": {
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string",
              "location": "query"
            },
            "maxResults": {
              "type": "integer",
              "description": "The maximum number of snapshot resources to return in the response, used\nfor paging. For any response, the actual number of snapshot resources\nreturned may be less than the specified `maxResults`.",
              "format": "int32",
              "location": "query"
            }
          },
          "path": "games/v1/players/{playerId}/snapshots",
          "flatPath": "games/v1/players/{playerId}/snapshots"
        }
      }
    },
    "achievements": {
      "methods": {
        "increment": {
          "path": "games/v1/achievements/{achievementId}/increment",
          "description": "Increments the steps of the achievement with the given ID for the currently\nauthenticated player.",
          "parameters": {
            "stepsToIncrement": {
              "type": "integer",
              "required": true,
              "format": "int32",
              "location": "query",
              "description": "The number of steps to increment."
            },
            "achievementId": {
              "required": true,
              "type": "string",
              "description": "The ID of the achievement used by this method.",
              "location": "path"
            },
            "requestId": {
              "location": "query",
              "description": "A randomly generated numeric ID for each request specified by the caller.\nThis number is used at the server to ensure that the request is handled\ncorrectly across retries.",
              "format": "int64",
              "type": "string"
            }
          },
          "httpMethod": "POST",
          "flatPath": "games/v1/achievements/{achievementId}/increment",
          "parameterOrder": [
            "achievementId",
            "stepsToIncrement"
          ],
          "response": {
            "$ref": "AchievementIncrementResponse"
          },
          "id": "games.achievements.increment",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ]
        },
        "unlock": {
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "AchievementUnlockResponse"
          },
          "path": "games/v1/achievements/{achievementId}/unlock",
          "id": "games.achievements.unlock",
          "flatPath": "games/v1/achievements/{achievementId}/unlock",
          "description": "Unlocks this achievement for the currently authenticated player.",
          "parameters": {
            "achievementId": {
              "location": "path",
              "required": true,
              "description": "The ID of the achievement used by this method.",
              "type": "string"
            }
          },
          "parameterOrder": [
            "achievementId"
          ],
          "httpMethod": "POST"
        },
        "list": {
          "parameterOrder": [
            "playerId"
          ],
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/players/{playerId}/achievements",
          "id": "games.achievements.list",
          "response": {
            "$ref": "PlayerAchievementListResponse"
          },
          "description": "Lists the progress for all your application's achievements for the\ncurrently authenticated player.",
          "httpMethod": "GET",
          "parameters": {
            "maxResults": {
              "format": "int32",
              "description": "The maximum number of achievement resources to return in the response, used\nfor paging. For any response, the actual number of achievement resources\nreturned may be less than the specified `maxResults`.",
              "location": "query",
              "type": "integer"
            },
            "playerId": {
              "required": true,
              "location": "path",
              "type": "string",
              "description": "A player ID. A value of `me` may be used in place of the\nauthenticated player's ID."
            },
            "pageToken": {
              "description": "The token returned by the previous request.",
              "location": "query",
              "type": "string"
            },
            "state": {
              "enum": [
                "ALL",
                "HIDDEN",
                "REVEALED",
                "UNLOCKED"
              ],
              "description": "Tells the server to return only achievements with the specified state.  If\nthis parameter isn't specified, all achievements are returned.",
              "location": "query",
              "type": "string"
            },
            "language": {
              "location": "query",
              "description": "The preferred language to use for strings returned by this method.",
              "type": "string"
            }
          },
          "path": "games/v1/players/{playerId}/achievements"
        },
        "updateMultiple": {
          "description": "Updates multiple achievements for the currently authenticated player.",
          "path": "games/v1/achievements/updateMultiple",
          "parameters": {},
          "httpMethod": "POST",
          "id": "games.achievements.updateMultiple",
          "flatPath": "games/v1/achievements/updateMultiple",
          "request": {
            "$ref": "AchievementUpdateMultipleRequest"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "response": {
            "$ref": "AchievementUpdateMultipleResponse"
          },
          "parameterOrder": []
        },
        "reveal": {
          "httpMethod": "POST",
          "parameters": {
            "achievementId": {
              "location": "path",
              "description": "The ID of the achievement used by this method.",
              "type": "string",
              "required": true
            }
          },
          "parameterOrder": [
            "achievementId"
          ],
          "id": "games.achievements.reveal",
          "response": {
            "$ref": "AchievementRevealResponse"
          },
          "description": "Sets the state of the achievement with the given ID to\n`REVEALED` for the currently authenticated player.",
          "path": "games/v1/achievements/{achievementId}/reveal",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "flatPath": "games/v1/achievements/{achievementId}/reveal"
        },
        "setStepsAtLeast": {
          "id": "games.achievements.setStepsAtLeast",
          "path": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "httpMethod": "POST",
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameterOrder": [
            "achievementId",
            "steps"
          ],
          "parameters": {
            "achievementId": {
              "description": "The ID of the achievement used by this method.",
              "required": true,
              "location": "path",
              "type": "string"
            },
            "steps": {
              "type": "integer",
              "description": "The minimum value to set the steps to.",
              "location": "query",
              "format": "int32",
              "required": true
            }
          },
          "response": {
            "$ref": "AchievementSetStepsAtLeastResponse"
          },
          "flatPath": "games/v1/achievements/{achievementId}/setStepsAtLeast",
          "description": "Sets the steps for the currently authenticated player towards unlocking an\nachievement. If the steps parameter is less than the current number of\nsteps that the player already gained for the achievement, the achievement\nis not modified."
        }
      }
    },
    "stats": {
      "methods": {
        "get": {
          "path": "games/v1/stats",
          "httpMethod": "GET",
          "parameterOrder": [],
          "response": {
            "$ref": "StatsResponse"
          },
          "scopes": [
            "https://www.googleapis.com/auth/games"
          ],
          "parameters": {},
          "description": "Returns engagement and spend statistics in this application for the\ncurrently authenticated user.",
          "flatPath": "games/v1/stats",
          "id": "games.stats.get"
        }
      }
    }
  },
  "ownerDomain": "google.com",
  "basePath": "",
  "protocol": "rest",
  "schemas": {
    "InstanceWebDetails": {
      "properties": {
        "launchUrl": {
          "description": "Launch URL for the game.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceWebDetails`."
        },
        "preferred": {
          "description": "Indicates that this instance is the default for new installations.",
          "type": "boolean"
        }
      },
      "description": "The Web details resource.",
      "type": "object",
      "id": "InstanceWebDetails"
    },
    "GamesAchievementSetStepsAtLeast": {
      "id": "GamesAchievementSetStepsAtLeast",
      "type": "object",
      "description": "The payload to request to increment an\nachievement.",
      "properties": {
        "steps": {
          "format": "int32",
          "description": "The minimum number of steps for the achievement to be set to.",
          "type": "integer"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#GamesAchievementSetStepsAtLeast`.",
          "type": "string"
        }
      }
    },
    "CategoryListResponse": {
      "description": "A third party list metagame categories response.",
      "type": "object",
      "id": "CategoryListResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#categoryListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Category"
          },
          "description": "The list of categories with usage data."
        },
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        }
      }
    },
    "PlayerScore": {
      "id": "PlayerScore",
      "description": "A player score.",
      "type": "object",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScore`.",
          "type": "string"
        },
        "score": {
          "description": "The numerical value for this player score.",
          "type": "string",
          "format": "int64"
        },
        "timeSpan": {
          "description": "The time span for this player score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "type": "string",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ]
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "formattedScore": {
          "type": "string",
          "description": "The formatted score for this player score."
        }
      }
    },
    "InstanceAndroidDetails": {
      "properties": {
        "packageName": {
          "description": "Android package name which maps to Google Play URL.",
          "type": "string"
        },
        "preferred": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations."
        },
        "enablePiracyCheck": {
          "description": "Flag indicating whether the anti-piracy check is enabled.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceAndroidDetails`."
        }
      },
      "type": "object",
      "description": "The Android instance details resource.",
      "id": "InstanceAndroidDetails"
    },
    "AchievementDefinitionsListResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementDefinitionsListResponse`."
        },
        "items": {
          "items": {
            "$ref": "AchievementDefinition"
          },
          "description": "The achievement definitions.",
          "type": "array"
        }
      },
      "description": "A list of achievement definition objects.",
      "type": "object",
      "id": "AchievementDefinitionsListResponse"
    },
    "AchievementUnlockResponse": {
      "description": "An achievement unlock response",
      "id": "AchievementUnlockResponse",
      "properties": {
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock\nrequest for the achievement was the first for the player).",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUnlockResponse`."
        }
      },
      "type": "object"
    },
    "PlayerEventListResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerEventListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "items": {
          "description": "The player events.",
          "items": {
            "$ref": "PlayerEvent"
          },
          "type": "array"
        }
      },
      "description": "A ListByPlayer response.",
      "type": "object",
      "id": "PlayerEventListResponse"
    },
    "PlayerScoreListResponse": {
      "description": "A list of score submission statuses.",
      "properties": {
        "submittedScores": {
          "type": "array",
          "description": "The score submissions statuses.",
          "items": {
            "$ref": "PlayerScoreResponse"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreListResponse`.",
          "type": "string"
        }
      },
      "id": "PlayerScoreListResponse",
      "type": "object"
    },
    "ApplicationVerifyResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#applicationVerifyResponse`.",
          "type": "string"
        },
        "player_id": {
          "type": "string",
          "description": "The ID of the player that was issued the auth token used in this request."
        },
        "alternate_player_id": {
          "type": "string",
          "description": "An alternate ID that was once used for the player that was issued the auth\ntoken used in this request. (This field is not normally populated.)"
        }
      },
      "type": "object",
      "id": "ApplicationVerifyResponse",
      "description": "A third party application verification response resource."
    },
    "RevisionCheckResponse": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#revisionCheckResponse`.",
          "type": "string"
        },
        "revisionStatus": {
          "type": "string",
          "enum": [
            "REVISION_STATUS_UNSPECIFIED",
            "OK",
            "DEPRECATED",
            "INVALID"
          ],
          "description": "The result of the revision check.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The revision being used is current.",
            "There is currently a newer version available, but the revision being used\nstill works.",
            "The revision being used is not supported in any released version."
          ]
        },
        "apiVersion": {
          "description": "The version of the API this client revision should use when calling API\nmethods.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "RevisionCheckResponse",
      "description": "A third party checking a revision response."
    },
    "StatsResponse": {
      "description": "A third party stats resource.",
      "properties": {
        "num_sessions_percentile": {
          "type": "number",
          "format": "float",
          "description": "The approximation of the sessions percentile of the player within the last\n30 days, where a session begins when the player is connected to Play Games\nServices and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not\npopulated if there is not enough information."
        },
        "days_since_last_played": {
          "format": "int32",
          "type": "integer",
          "description": "Number of days since the player last played this game. E.g., 0, 1, 5, 10,\n... . Not populated if there is not enough information."
        },
        "spend_probability": {
          "format": "float",
          "type": "number",
          "description": "The probability of the player going to spend the game in the next seven\ndays. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough\ninformation."
        },
        "avg_session_length_minutes": {
          "format": "float",
          "type": "number",
          "description": "Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not\npopulated if there is not enough information."
        },
        "total_spend_next_28_days": {
          "description": "The predicted amount of money that the player going to spend in the next 28\ndays. E.g., 1, 30, 60, ... . Not populated if there is not enough\ninformation.",
          "type": "number",
          "format": "float"
        },
        "churn_probability": {
          "description": "The probability of the player not returning to play the game in the next\nday. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough\ninformation.",
          "format": "float",
          "type": "number"
        },
        "spend_percentile": {
          "description": "The approximate spend percentile of the player in this game. E.g., 0, 0.25,\n0.5, 0.75. Not populated if there is not enough information.",
          "type": "number",
          "format": "float"
        },
        "num_sessions": {
          "type": "integer",
          "format": "int32",
          "description": "The approximate number of sessions of the player within the last 28 days,\nwhere a session begins when the player is connected to Play Games Services\nand ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated\nif there is not enough information."
        },
        "high_spender_probability": {
          "type": "number",
          "format": "float",
          "description": "The probability of the player going to spend beyond a threshold amount of\nmoney. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough\ninformation."
        },
        "num_purchases": {
          "description": "Number of in-app purchases made by the player in this game. E.g., 0, 1, 5,\n10, ... . Not populated if there is not enough information.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#statsResponse`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "StatsResponse"
    },
    "AchievementRevealResponse": {
      "id": "AchievementRevealResponse",
      "description": "An achievement reveal response",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementRevealResponse`."
        },
        "currentState": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "type": "string",
          "enum": [
            "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "REVEALED",
            "UNLOCKED"
          ],
          "description": "The current state of the achievement for which a reveal was attempted. This\nmight be `UNLOCKED` if the achievement was already unlocked."
        }
      },
      "type": "object"
    },
    "EventDefinition": {
      "description": "An event definition resource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventDefinition`."
        },
        "displayName": {
          "description": "The name to display for the event.",
          "type": "string"
        },
        "isDefaultImageUrl": {
          "description": "Indicates whether the icon image being returned is a default image, or is\ngame-provided.",
          "type": "boolean"
        },
        "description": {
          "description": "Description of what this event represents.",
          "type": "string"
        },
        "visibility": {
          "enumDescriptions": [
            "Default value. Should not be used.",
            "This event should be visible to all users.",
            "This event should only be shown to users that have recorded this event\nat least once."
          ],
          "type": "string",
          "enum": [
            "EVENT_VISIBILITY_UNSPECIFIED",
            "REVEALED",
            "HIDDEN"
          ],
          "description": "The visibility of event being tracked in this definition."
        },
        "childEvents": {
          "description": "A list of events that are a child of this event.",
          "type": "array",
          "items": {
            "$ref": "EventChild"
          }
        },
        "imageUrl": {
          "description": "The base URL for the image that represents the event.",
          "type": "string"
        },
        "id": {
          "type": "string",
          "description": "The ID of the event."
        }
      },
      "type": "object",
      "id": "EventDefinition"
    },
    "EventRecordRequest": {
      "id": "EventRecordRequest",
      "type": "object",
      "description": "An event period update resource.",
      "properties": {
        "requestId": {
          "format": "int64",
          "type": "string",
          "description": "The request ID used to identify this attempt to record events."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventRecordRequest`.",
          "type": "string"
        },
        "currentTimeMillis": {
          "format": "int64",
          "type": "string",
          "description": "The current time when this update was sent, in milliseconds, since 1970 UTC\n(Unix Epoch)."
        },
        "timePeriods": {
          "description": "A list of the time period updates being made in this request.",
          "items": {
            "$ref": "EventPeriodUpdate"
          },
          "type": "array"
        }
      }
    },
    "PlayerScoreSubmissionList": {
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreSubmissionList`."
        },
        "scores": {
          "items": {
            "$ref": "ScoreSubmission"
          },
          "type": "array",
          "description": "The score submissions."
        }
      },
      "id": "PlayerScoreSubmissionList",
      "type": "object",
      "description": "A list of score submission requests."
    },
    "EventRecordFailure": {
      "type": "object",
      "description": "An event update failure resource.",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The ID of the event that was not updated."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventRecordFailure`."
        },
        "failureCause": {
          "enumDescriptions": [
            "Default value. Should not use.",
            "An attempt was made to set an event that was not defined.",
            "An attempt was made to increment an event by a non-positive value."
          ],
          "enum": [
            "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED",
            "NOT_FOUND",
            "INVALID_UPDATE_VALUE"
          ],
          "type": "string",
          "description": "The cause for the update failure."
        }
      },
      "id": "EventRecordFailure"
    },
    "AchievementDefinition": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the achievement."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementDefinition`.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "The description of the achievement."
        },
        "unlockedIconUrl": {
          "type": "string",
          "description": "The image URL for the unlocked achievement icon."
        },
        "experiencePoints": {
          "type": "string",
          "description": "Experience points which will be earned when unlocking this achievement.",
          "format": "int64"
        },
        "formattedTotalSteps": {
          "description": "The total steps for an incremental achievement as a string.",
          "type": "string"
        },
        "isRevealedIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the revealed icon image being returned is a default\nimage, or is provided by the game."
        },
        "isUnlockedIconUrlDefault": {
          "description": "Indicates whether the unlocked icon image being returned is a default\nimage, or is game-provided.",
          "type": "boolean"
        },
        "initialState": {
          "enum": [
            "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "description": "The initial state of the achievement.",
          "type": "string",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "totalSteps": {
          "description": "The total steps for an incremental achievement.",
          "format": "int32",
          "type": "integer"
        },
        "revealedIconUrl": {
          "type": "string",
          "description": "The image URL for the revealed achievement icon."
        },
        "achievementType": {
          "description": "The type of the achievement.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is either locked or unlocked.",
            "Achievement is incremental."
          ],
          "enum": [
            "ACHIEVEMENT_TYPE_UNSPECIFIED",
            "STANDARD",
            "INCREMENTAL"
          ],
          "type": "string"
        }
      },
      "description": "An achievement definition object.",
      "id": "AchievementDefinition",
      "type": "object"
    },
    "Snapshot": {
      "properties": {
        "uniqueName": {
          "description": "The unique name provided when the snapshot was created.",
          "type": "string"
        },
        "lastModifiedMillis": {
          "description": "The timestamp (in millis since Unix epoch) of the last modification to this\nsnapshot.",
          "format": "int64",
          "type": "string"
        },
        "title": {
          "description": "The title of this snapshot.",
          "type": "string"
        },
        "description": {
          "type": "string",
          "description": "The description of this snapshot."
        },
        "type": {
          "description": "The type of this snapshot.",
          "enum": [
            "SNAPSHOT_TYPE_UNSPECIFIED",
            "SAVE_GAME"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "A snapshot representing a save game."
          ],
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshot`."
        },
        "durationMillis": {
          "description": "The duration associated with this snapshot, in millis.",
          "type": "string",
          "format": "int64"
        },
        "progressValue": {
          "description": "The progress value (64-bit integer set by developer) associated with this\nsnapshot.",
          "type": "string",
          "format": "int64"
        },
        "driveId": {
          "description": "The ID of the file underlying this snapshot in the Drive API.  Only present\nif the snapshot is a view on a Drive file and the file is owned by the\ncaller.",
          "type": "string"
        },
        "coverImage": {
          "$ref": "SnapshotImage",
          "description": "The cover image of this snapshot. May be absent if there is no image."
        },
        "id": {
          "description": "The ID of the snapshot.",
          "type": "string"
        }
      },
      "description": "An snapshot object.",
      "id": "Snapshot",
      "type": "object"
    },
    "EventBatchRecordFailure": {
      "id": "EventBatchRecordFailure",
      "description": "A batch update failure resource.",
      "properties": {
        "failureCause": {
          "enum": [
            "EVENT_FAILURE_CAUSE_UNSPECIFIED",
            "TOO_LARGE",
            "TIME_PERIOD_EXPIRED",
            "TIME_PERIOD_SHORT",
            "TIME_PERIOD_LONG",
            "ALREADY_UPDATED",
            "RECORD_RATE_HIGH"
          ],
          "type": "string",
          "enumDescriptions": [
            "Default value. Should not be used.",
            "A batch request was issued with more events than are allowed in\na single batch.",
            "A batch was sent with data too far in the past to record.",
            "A batch was sent with a time range that was too short.",
            "A batch was sent with a time range that was too long.",
            "An attempt was made to record a batch of data which was already seen.",
            "An attempt was made to record data faster than the server\nwill apply updates."
          ],
          "description": "The cause for the update failure."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventBatchRecordFailure`.",
          "type": "string"
        },
        "range": {
          "description": "The time range which was rejected; empty for a request-wide failure.",
          "$ref": "EventPeriodRange"
        }
      },
      "type": "object"
    },
    "PlayerLeaderboardScoreListResponse": {
      "id": "PlayerLeaderboardScoreListResponse",
      "type": "object",
      "description": "A list of player leaderboard scores.",
      "properties": {
        "player": {
          "$ref": "Player",
          "description": "The Player resources for the owner of this score."
        },
        "items": {
          "type": "array",
          "description": "The leaderboard scores.",
          "items": {
            "$ref": "PlayerLeaderboardScore"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLeaderboardScoreListResponse`.",
          "type": "string"
        },
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        }
      }
    },
    "LeaderboardScoreRank": {
      "id": "LeaderboardScoreRank",
      "type": "object",
      "description": "A score rank in a leaderboard.",
      "properties": {
        "rank": {
          "format": "int64",
          "description": "The rank in the leaderboard.",
          "type": "string"
        },
        "formattedNumScores": {
          "description": "The number of scores in the leaderboard as a string.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardScoreRank`."
        },
        "numScores": {
          "type": "string",
          "description": "The number of scores in the leaderboard.",
          "format": "int64"
        },
        "formattedRank": {
          "description": "The rank in the leaderboard as a string.",
          "type": "string"
        }
      }
    },
    "MetagameConfig": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#metagameConfig`.",
          "type": "string"
        },
        "currentVersion": {
          "type": "integer",
          "description": "Current version of the metagame configuration data. When this data is\nupdated, the version number will be increased by one.",
          "format": "int32"
        },
        "playerLevels": {
          "items": {
            "$ref": "PlayerLevel"
          },
          "type": "array",
          "description": "The list of player levels."
        }
      },
      "description": "The metagame config resource",
      "type": "object",
      "id": "MetagameConfig"
    },
    "Leaderboard": {
      "description": "The Leaderboard resource.",
      "properties": {
        "order": {
          "enum": [
            "SCORE_ORDER_UNSPECIFIED",
            "LARGER_IS_BETTER",
            "SMALLER_IS_BETTER"
          ],
          "type": "string",
          "description": "How scores are ordered.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Larger values are better; scores are sorted in descending order",
            "Smaller values are better; scores are sorted in ascending order"
          ]
        },
        "id": {
          "description": "The leaderboard ID.",
          "type": "string"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboard`."
        },
        "isIconUrlDefault": {
          "type": "boolean",
          "description": "Indicates whether the icon image being returned is a default image, or is\ngame-provided."
        },
        "name": {
          "type": "string",
          "description": "The name of the leaderboard."
        },
        "iconUrl": {
          "description": "The icon for the leaderboard.",
          "type": "string"
        }
      },
      "id": "Leaderboard",
      "type": "object"
    },
    "EventDefinitionListResponse": {
      "id": "EventDefinitionListResponse",
      "properties": {
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventDefinitionListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "EventDefinition"
          },
          "description": "The event definitions."
        }
      },
      "description": "A ListDefinitions response.",
      "type": "object"
    },
    "PlayerScoreResponse": {
      "id": "PlayerScoreResponse",
      "properties": {
        "formattedScore": {
          "type": "string",
          "description": "The formatted value of the submitted score."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerScoreResponse`.",
          "type": "string"
        },
        "leaderboardId": {
          "description": "The leaderboard ID that this score was submitted to.",
          "type": "string"
        },
        "unbeatenScores": {
          "description": "The scores in time spans that have not been beaten.  As an example, the\nsubmitted score may be better than the\nplayer's `DAILY` score, but not better than the player's scores\nfor the `WEEKLY` or `ALL_TIME` time spans.",
          "items": {
            "$ref": "PlayerScore"
          },
          "type": "array"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "beatenScoreTimeSpans": {
          "items": {
            "type": "string",
            "enum": [
              "SCORE_TIME_SPAN_UNSPECIFIED",
              "ALL_TIME",
              "WEEKLY",
              "DAILY"
            ]
          },
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "type": "array",
          "description": "The time spans where the submitted score is better than the existing score\nfor that time span."
        }
      },
      "description": "A list of leaderboard entry resources.",
      "type": "object"
    },
    "LeaderboardListResponse": {
      "description": "A list of leaderboard objects.",
      "properties": {
        "nextPageToken": {
          "type": "string",
          "description": "Token corresponding to the next page of results."
        },
        "items": {
          "description": "The leaderboards.",
          "items": {
            "$ref": "Leaderboard"
          },
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardListResponse`.",
          "type": "string"
        }
      },
      "type": "object",
      "id": "LeaderboardListResponse"
    },
    "ApplicationCategory": {
      "id": "ApplicationCategory",
      "type": "object",
      "properties": {
        "primary": {
          "type": "string",
          "description": "The primary category."
        },
        "secondary": {
          "type": "string",
          "description": "The secondary category."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#applicationCategory`.",
          "type": "string"
        }
      },
      "description": "An application category object."
    },
    "LeaderboardEntry": {
      "type": "object",
      "description": "The Leaderboard Entry resource.",
      "id": "LeaderboardEntry",
      "properties": {
        "scoreTag": {
          "description": "Additional information about the score.  Values must contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        },
        "formattedScoreRank": {
          "type": "string",
          "description": "The localized string for the rank of this score for this leaderboard."
        },
        "player": {
          "$ref": "Player",
          "description": "The player who holds this score."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardEntry`.",
          "type": "string"
        },
        "scoreRank": {
          "type": "string",
          "format": "int64",
          "description": "The rank of this score for this leaderboard."
        },
        "scoreValue": {
          "format": "int64",
          "type": "string",
          "description": "The numerical value of this score."
        },
        "timeSpan": {
          "description": "The time span of this high score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ],
          "type": "string",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ]
        },
        "writeTimestampMillis": {
          "format": "int64",
          "type": "string",
          "description": "The timestamp at which this score was recorded, in milliseconds since the\nepoch in UTC."
        },
        "formattedScore": {
          "type": "string",
          "description": "The localized string for the numerical value of this score."
        }
      }
    },
    "ScoreSubmission": {
      "properties": {
        "score": {
          "type": "string",
          "description": "The new score being submitted.",
          "format": "int64"
        },
        "scoreTag": {
          "type": "string",
          "description": "Additional information about this score.  Values will contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#scoreSubmission`."
        },
        "signature": {
          "description": "Signature Values will contain URI-safe characters as defined by section 2.3\nof RFC 3986.",
          "type": "string"
        },
        "leaderboardId": {
          "description": "The leaderboard this score is being submitted to.",
          "type": "string"
        }
      },
      "description": "A request to submit a score to leaderboards.",
      "id": "ScoreSubmission",
      "type": "object"
    },
    "Category": {
      "type": "object",
      "id": "Category",
      "description": "Data related to individual game categories.",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#category`.",
          "type": "string"
        },
        "category": {
          "type": "string",
          "description": "The category name."
        },
        "experiencePoints": {
          "type": "string",
          "description": "Experience points earned in this category.",
          "format": "int64"
        }
      }
    },
    "SnapshotImage": {
      "type": "object",
      "description": "An image of a snapshot.",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL of the image. This URL may be invalidated at any time and should\nnot be cached."
        },
        "mime_type": {
          "description": "The MIME type of the image.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshotImage`.",
          "type": "string"
        },
        "height": {
          "type": "integer",
          "description": "The height of the image.",
          "format": "int32"
        },
        "width": {
          "description": "The width of the image.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "SnapshotImage"
    },
    "AchievementUpdateResponse": {
      "properties": {
        "currentState": {
          "description": "The current state of the achievement.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ],
          "type": "string",
          "enum": [
            "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ]
        },
        "updateOccurred": {
          "description": "Whether the requested updates actually affected the achievement.",
          "type": "boolean"
        },
        "achievementId": {
          "description": "The achievement this update is was applied to.",
          "type": "string"
        },
        "currentSteps": {
          "description": "The current steps recorded for this achievement if it is incremental.",
          "format": "int32",
          "type": "integer"
        },
        "newlyUnlocked": {
          "description": "Whether this achievement was newly unlocked (that is, whether the unlock\nrequest for the achievement was the first for the player).",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateResponse`."
        }
      },
      "id": "AchievementUpdateResponse",
      "description": "An updated achievement.",
      "type": "object"
    },
    "EventUpdateRequest": {
      "id": "EventUpdateRequest",
      "type": "object",
      "description": "An event period update resource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventUpdateRequest`."
        },
        "updateCount": {
          "type": "string",
          "format": "int64",
          "description": "The number of times this event occurred in this time period."
        },
        "definitionId": {
          "description": "The ID of the event being modified in this update.",
          "type": "string"
        }
      }
    },
    "InstanceIosDetails": {
      "description": "The iOS details resource.",
      "id": "InstanceIosDetails",
      "type": "object",
      "properties": {
        "itunesAppId": {
          "type": "string",
          "description": "iTunes App ID."
        },
        "supportIpad": {
          "description": "Flag to indicate if this instance supports iPad.",
          "type": "boolean"
        },
        "preferredForIphone": {
          "type": "boolean",
          "description": "Indicates that this instance is the default for new installations on iPhone\ndevices."
        },
        "supportIphone": {
          "description": "Flag to indicate if this instance supports iPhone.",
          "type": "boolean"
        },
        "preferredForIpad": {
          "description": "Indicates that this instance is the default for new installations on iPad\ndevices.",
          "type": "boolean"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instanceIosDetails`."
        },
        "bundleIdentifier": {
          "description": "Bundle identifier.",
          "type": "string"
        }
      }
    },
    "EventPeriodUpdate": {
      "properties": {
        "timePeriod": {
          "$ref": "EventPeriodRange",
          "description": "The time period being covered by this update."
        },
        "updates": {
          "type": "array",
          "description": "The updates being made for this time period.",
          "items": {
            "$ref": "EventUpdateRequest"
          }
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventPeriodUpdate`.",
          "type": "string"
        }
      },
      "id": "EventPeriodUpdate",
      "description": "An event period update resource.",
      "type": "object"
    },
    "PlayerAchievementListResponse": {
      "description": "A list of achievement objects.",
      "type": "object",
      "id": "PlayerAchievementListResponse",
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerAchievementListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "description": "The achievements.",
          "items": {
            "$ref": "PlayerAchievement"
          }
        },
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        }
      }
    },
    "PlayerEvent": {
      "type": "object",
      "properties": {
        "playerId": {
          "type": "string",
          "description": "The ID of the player."
        },
        "definitionId": {
          "type": "string",
          "description": "The ID of the event definition."
        },
        "numEvents": {
          "type": "string",
          "description": "The current number of times this event has occurred.",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerEvent`."
        },
        "formattedNumEvents": {
          "description": "The current number of times this event has occurred, as a string. The\nformatting of this string depends on the configuration of your event in the\nPlay Games Developer Console.",
          "type": "string"
        }
      },
      "description": "An event status resource.",
      "id": "PlayerEvent"
    },
    "AchievementIncrementResponse": {
      "description": "An achievement increment response",
      "id": "AchievementIncrementResponse",
      "type": "object",
      "properties": {
        "currentSteps": {
          "format": "int32",
          "description": "The current steps recorded for this incremental achievement.",
          "type": "integer"
        },
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of\nsteps required to unlock."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementIncrementResponse`.",
          "type": "string"
        }
      }
    },
    "Application": {
      "type": "object",
      "id": "Application",
      "description": "The Application resource.",
      "properties": {
        "id": {
          "description": "The ID of the application.",
          "type": "string"
        },
        "category": {
          "$ref": "ApplicationCategory",
          "description": "The category of the application."
        },
        "enabledFeatures": {
          "description": "A list of features that have been enabled for the application.",
          "enumDescriptions": [
            "Safe default, don't use.",
            "Saved Games (snapshots)."
          ],
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "APPLICATION_FEATURE_UNSPECIFIED",
              "SNAPSHOTS"
            ]
          }
        },
        "leaderboard_count": {
          "description": "The number of leaderboards visible to the currently authenticated player.",
          "format": "int32",
          "type": "integer"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#application`.",
          "type": "string"
        },
        "description": {
          "description": "The description of the application.",
          "type": "string"
        },
        "themeColor": {
          "type": "string",
          "description": "A hint to the client UI for what color to use as an app-themed color. The\ncolor is given as an RGB triplet (e.g. \"E0E0E0\")."
        },
        "name": {
          "description": "The name of the application.",
          "type": "string"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "Instance"
          },
          "description": "The instances of the application."
        },
        "author": {
          "type": "string",
          "description": "The author of the application."
        },
        "assets": {
          "type": "array",
          "items": {
            "$ref": "ImageAsset"
          },
          "description": "The assets of the application."
        },
        "achievement_count": {
          "description": "The number of achievements visible to the currently authenticated player.",
          "type": "integer",
          "format": "int32"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "type": "string",
          "description": "The last updated timestamp of the application."
        }
      }
    },
    "AchievementUpdateRequest": {
      "type": "object",
      "properties": {
        "updateType": {
          "enumDescriptions": [
            "Safe default, don't use.",
            "Achievement is revealed.",
            "Achievement is unlocked.",
            "Achievement is incremented.",
            "Achievement progress is set to at least the passed value."
          ],
          "enum": [
            "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED",
            "REVEAL",
            "UNLOCK",
            "INCREMENT",
            "SET_STEPS_AT_LEAST"
          ],
          "description": "The type of update being applied.",
          "type": "string"
        },
        "incrementPayload": {
          "$ref": "GamesAchievementIncrement",
          "description": "The payload if an update of type `INCREMENT` was requested for\nthe achievement."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateRequest`.",
          "type": "string"
        },
        "setStepsAtLeastPayload": {
          "description": "The payload if an update of type `SET_STEPS_AT_LEAST` was\nrequested for the achievement.",
          "$ref": "GamesAchievementSetStepsAtLeast"
        },
        "achievementId": {
          "description": "The achievement this update is being applied to.",
          "type": "string"
        }
      },
      "id": "AchievementUpdateRequest",
      "description": "A request to update an achievement."
    },
    "ProfileSettings": {
      "type": "object",
      "id": "ProfileSettings",
      "description": "Profile settings",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#profileSettings`."
        },
        "profileVisible": {
          "description": "Whether the player's profile is visible to the currently signed in player.",
          "type": "boolean"
        },
        "friendsListVisibility": {
          "enum": [
            "FRIENDS_LIST_VISIBILITY_UNSPECIFIED",
            "VISIBLE",
            "REQUEST_REQUIRED",
            "UNAVAILABLE"
          ],
          "type": "string",
          "enumDescriptions": [
            "Unused.",
            "The friends list is currently visible to the game.",
            "The developer does not have access to the friends list, but can call the\nAndroid API to show a consent dialog.",
            "The friends list is currently unavailable for this user, and it is not\npossible to request access at this time, either because the user has\npermanently declined or the friends feature is not available to them. In\nthis state, any attempts to request access to the friends list will be\nunsuccessful."
          ]
        }
      }
    },
    "SnapshotListResponse": {
      "description": "A third party list snapshots response.",
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results. If there are no more\nresults, the token is omitted.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#snapshotListResponse`.",
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "Snapshot"
          },
          "description": "The snapshots."
        }
      },
      "id": "SnapshotListResponse",
      "type": "object"
    },
    "PlayerLeaderboardScore": {
      "id": "PlayerLeaderboardScore",
      "type": "object",
      "properties": {
        "publicRank": {
          "$ref": "LeaderboardScoreRank",
          "description": "The public rank of the score in this leaderboard. This object will not be\npresent if the user is not sharing their scores publicly."
        },
        "leaderboard_id": {
          "description": "The ID of the leaderboard this score is in.",
          "type": "string"
        },
        "socialRank": {
          "description": "The social rank of the score in this leaderboard.",
          "$ref": "LeaderboardScoreRank"
        },
        "timeSpan": {
          "type": "string",
          "enum": [
            "SCORE_TIME_SPAN_UNSPECIFIED",
            "ALL_TIME",
            "WEEKLY",
            "DAILY"
          ],
          "description": "The time span of this score.",
          "enumDescriptions": [
            "Default value. This value is unused.",
            "The score is an all-time score.",
            "The score is a weekly score.",
            "The score is a daily score."
          ]
        },
        "writeTimestamp": {
          "description": "The timestamp at which this score was recorded, in milliseconds since the\nepoch in UTC.",
          "type": "string",
          "format": "int64"
        },
        "scoreString": {
          "description": "The formatted value of this score.",
          "type": "string"
        },
        "scoreValue": {
          "description": "The numerical value of this score.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLeaderboardScore`."
        },
        "scoreTag": {
          "description": "Additional information about the score.  Values must contain no more than\n64 URI-safe characters as defined by section 2.3 of RFC 3986.",
          "type": "string"
        }
      },
      "description": "A player leaderboard score object."
    },
    "PlayerAchievement": {
      "properties": {
        "formattedCurrentStepsString": {
          "description": "The current steps for an incremental achievement as a string.",
          "type": "string"
        },
        "achievementState": {
          "description": "The state of the achievement.",
          "type": "string",
          "enum": [
            "STATE_UNSPECIFIED",
            "HIDDEN",
            "REVEALED",
            "UNLOCKED"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "Achievement is hidden.",
            "Achievement is revealed.",
            "Achievement is unlocked."
          ]
        },
        "experiencePoints": {
          "description": "Experience points earned for the achievement. This field is absent for\nachievements that have not yet been unlocked and 0 for achievements that\nhave been unlocked by testers but that are unpublished.",
          "format": "int64",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerAchievement`.",
          "type": "string"
        },
        "lastUpdatedTimestamp": {
          "format": "int64",
          "description": "The timestamp of the last modification to this achievement's state.",
          "type": "string"
        },
        "id": {
          "description": "The ID of the achievement.",
          "type": "string"
        },
        "currentSteps": {
          "description": "The current steps for an incremental achievement.",
          "type": "integer",
          "format": "int32"
        }
      },
      "id": "PlayerAchievement",
      "type": "object",
      "description": "An achievement object."
    },
    "Instance": {
      "id": "Instance",
      "description": "The Instance resource.",
      "type": "object",
      "properties": {
        "platformType": {
          "enum": [
            "PLATFORM_TYPE_UNSPECIFIED",
            "ANDROID",
            "IOS",
            "WEB_APP"
          ],
          "type": "string",
          "description": "The platform type.",
          "enumDescriptions": [
            "Default value. Should be unused.",
            "Instance is for Android.",
            "Instance is for iOS.",
            "Instance is for Web App."
          ]
        },
        "realtimePlay": {
          "description": "Flag to show if this game instance supports realtime play.",
          "type": "boolean"
        },
        "iosInstance": {
          "$ref": "InstanceIosDetails",
          "description": "Platform dependent details for iOS."
        },
        "acquisitionUri": {
          "type": "string",
          "description": "URI which shows where a user can acquire this instance."
        },
        "webInstance": {
          "description": "Platform dependent details for Web.",
          "$ref": "InstanceWebDetails"
        },
        "androidInstance": {
          "$ref": "InstanceAndroidDetails",
          "description": "Platform dependent details for Android."
        },
        "name": {
          "description": "Localized display name.",
          "type": "string"
        },
        "turnBasedPlay": {
          "description": "Flag to show if this game instance supports turn based play.",
          "type": "boolean"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#instance`.",
          "type": "string"
        }
      }
    },
    "PlayerListResponse": {
      "properties": {
        "nextPageToken": {
          "description": "Token corresponding to the next page of results.",
          "type": "string"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerListResponse`.",
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "Player"
          },
          "description": "The players.",
          "type": "array"
        }
      },
      "description": "A third party player list response.",
      "id": "PlayerListResponse",
      "type": "object"
    },
    "ImageAsset": {
      "id": "ImageAsset",
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "description": "The width of the asset.",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "description": "The height of the asset.",
          "format": "int32"
        },
        "name": {
          "description": "The name of the asset.",
          "type": "string"
        },
        "url": {
          "type": "string",
          "description": "The URL of the asset."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#imageAsset`."
        }
      },
      "description": "An image asset object."
    },
    "EventUpdateResponse": {
      "type": "object",
      "id": "EventUpdateResponse",
      "description": "An event period update resource.",
      "properties": {
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventUpdateResponse`."
        },
        "batchFailures": {
          "description": "Any batch-wide failures which occurred applying updates.",
          "items": {
            "$ref": "EventBatchRecordFailure"
          },
          "type": "array"
        },
        "eventFailures": {
          "type": "array",
          "description": "Any failures updating a particular event.",
          "items": {
            "$ref": "EventRecordFailure"
          }
        },
        "playerEvents": {
          "type": "array",
          "description": "The current status of any updated events",
          "items": {
            "$ref": "PlayerEvent"
          }
        }
      }
    },
    "GamesAchievementIncrement": {
      "id": "GamesAchievementIncrement",
      "type": "object",
      "description": "The payload to request to increment an\nachievement.",
      "properties": {
        "requestId": {
          "description": "The requestId associated with an increment to an achievement.",
          "type": "string",
          "format": "int64"
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#GamesAchievementIncrement`."
        },
        "steps": {
          "type": "integer",
          "description": "The number of steps to be incremented.",
          "format": "int32"
        }
      }
    },
    "PlayerLevel": {
      "id": "PlayerLevel",
      "properties": {
        "level": {
          "type": "integer",
          "description": "The level for the user.",
          "format": "int32"
        },
        "minExperiencePoints": {
          "format": "int64",
          "type": "string",
          "description": "The minimum experience points for this level."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerLevel`.",
          "type": "string"
        },
        "maxExperiencePoints": {
          "type": "string",
          "format": "int64",
          "description": "The maximum experience points for this level."
        }
      },
      "type": "object",
      "description": "1P/3P metadata about a user's level."
    },
    "AchievementUpdateMultipleRequest": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "array",
          "items": {
            "$ref": "AchievementUpdateRequest"
          },
          "description": "The individual achievement update requests."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateMultipleRequest`."
        }
      },
      "id": "AchievementUpdateMultipleRequest",
      "description": "A list of achievement update requests."
    },
    "AchievementUpdateMultipleResponse": {
      "properties": {
        "updatedAchievements": {
          "items": {
            "$ref": "AchievementUpdateResponse"
          },
          "description": "The updated state of the achievements.",
          "type": "array"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementUpdateMultipleResponse`.",
          "type": "string"
        }
      },
      "id": "AchievementUpdateMultipleResponse",
      "type": "object"
    },
    "AchievementSetStepsAtLeastResponse": {
      "description": "An achievement set steps at least response.",
      "type": "object",
      "properties": {
        "newlyUnlocked": {
          "type": "boolean",
          "description": "Whether the current steps for the achievement has reached the number of\nsteps required to unlock."
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#achievementSetStepsAtLeastResponse`.",
          "type": "string"
        },
        "currentSteps": {
          "description": "The current steps recorded for this incremental achievement.",
          "format": "int32",
          "type": "integer"
        }
      },
      "id": "AchievementSetStepsAtLeastResponse"
    },
    "EventPeriodRange": {
      "description": "An event period time range.",
      "properties": {
        "periodEndMillis": {
          "format": "int64",
          "type": "string",
          "description": "The time when this update period ends, in millis, since 1970 UTC (Unix\nEpoch)."
        },
        "periodStartMillis": {
          "type": "string",
          "format": "int64",
          "description": "The time when this update period begins, in millis, since 1970 UTC (Unix\nEpoch)."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventPeriodRange`."
        }
      },
      "type": "object",
      "id": "EventPeriodRange"
    },
    "LeaderboardScores": {
      "properties": {
        "nextPageToken": {
          "description": "The pagination token for the next page of results.",
          "type": "string"
        },
        "prevPageToken": {
          "type": "string",
          "description": "The pagination token for the previous page of results."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "LeaderboardEntry"
          },
          "description": "The scores in the leaderboard."
        },
        "numScores": {
          "description": "The total number of scores in the leaderboard.",
          "type": "string",
          "format": "int64"
        },
        "playerScore": {
          "$ref": "LeaderboardEntry",
          "description": "The score of the requesting player on the leaderboard. The player's score\nmay appear both here and in the list of scores above. If you are viewing a\npublic leaderboard and the player is not sharing their gameplay information\npublicly, the `scoreRank`and `formattedScoreRank`\nvalues will not be present."
        },
        "kind": {
          "type": "string",
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#leaderboardScores`."
        }
      },
      "description": "A ListScores response.",
      "type": "object",
      "id": "LeaderboardScores"
    },
    "Player": {
      "properties": {
        "bannerUrlLandscape": {
          "description": "The url to the landscape mode player banner image.",
          "type": "string"
        },
        "playerId": {
          "description": "The ID of the player.",
          "type": "string"
        },
        "friendStatus": {
          "description": "The friend status of the given player, relative to the requester. This is\nunset if the player is not sharing their friends list with the game.",
          "enum": [
            "FRIEND_STATUS_UNSPECIFIED",
            "NO_RELATIONSHIP",
            "FRIEND"
          ],
          "enumDescriptions": [
            "Default value. This value is unused.",
            "There is no relationship between the players.",
            "The player and requester are friends."
          ],
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "The player's title rewarded for their game activities."
        },
        "experienceInfo": {
          "description": "An object to represent Play Game experience information for the player.",
          "$ref": "PlayerExperienceInfo"
        },
        "profileSettings": {
          "description": "The player's profile settings. Controls whether or not the player's profile\nis visible to other players.",
          "$ref": "ProfileSettings"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#player`",
          "type": "string"
        },
        "avatarImageUrl": {
          "type": "string",
          "description": "The base URL for the image that represents the player."
        },
        "name": {
          "type": "object",
          "description": "A representation of the individual components of the name.",
          "properties": {
            "givenName": {
              "description": "The given name of this player. In some places, this is known as the first\nname.",
              "type": "string"
            },
            "familyName": {
              "type": "string",
              "description": "The family name of this player. In some places, this is known as the last\nname."
            }
          }
        },
        "displayName": {
          "type": "string",
          "description": "The name to display for the player."
        },
        "originalPlayerId": {
          "type": "string",
          "description": "The player ID that was used for this player the first time they signed into\nthe game in question. This is only populated for calls to player.get for\nthe requesting player, only if the player ID has subsequently changed, and\nonly to clients that support remapping player IDs."
        },
        "bannerUrlPortrait": {
          "type": "string",
          "description": "The url to the portrait mode player banner image."
        }
      },
      "type": "object",
      "description": "A Player resource.",
      "id": "Player"
    },
    "EventChild": {
      "properties": {
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#eventChild`.",
          "type": "string"
        },
        "childId": {
          "description": "The ID of the child event.",
          "type": "string"
        }
      },
      "description": "An event child relationship resource.",
      "id": "EventChild",
      "type": "object"
    },
    "PlayerExperienceInfo": {
      "description": "1P/3P metadata about the player's experience.",
      "type": "object",
      "properties": {
        "nextLevel": {
          "description": "The next level of the player. If the current level is the maximum level,\nthis should be same as the current level.",
          "$ref": "PlayerLevel"
        },
        "lastLevelUpTimestampMillis": {
          "type": "string",
          "description": "The timestamp when the player was leveled up, in millis since Unix epoch\nUTC.",
          "format": "int64"
        },
        "kind": {
          "description": "Uniquely identifies the type of this resource. Value is always the fixed\nstring `games#playerExperienceInfo`.",
          "type": "string"
        },
        "currentExperiencePoints": {
          "description": "The current number of experience points for the player.",
          "type": "string",
          "format": "int64"
        },
        "currentLevel": {
          "$ref": "PlayerLevel",
          "description": "The current level of the player."
        }
      },
      "id": "PlayerExperienceInfo"
    }
  },
  "servicePath": "",
  "id": "games:v1",
  "ownerName": "Google",
  "rootUrl": "https://www.googleapis.com/",
  "batchPath": "batch/games/v1",
  "version": "v1"
}
